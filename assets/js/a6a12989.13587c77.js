"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["374"],{93951:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>c,default:()=>l,contentTitle:()=>i,assets:()=>d,toc:()=>o,metadata:()=>a});var a=JSON.parse('{"id":"\u524D\u7AEF/React/React \u751F\u6001/\u72B6\u6001\u7BA1\u7406/Redux/index","title":"Redux \uD83E\uDDCA","description":"API","source":"@site/docs/\u524D\u7AEF/React/React \u751F\u6001/\u72B6\u6001\u7BA1\u7406/Redux/index.mdx","sourceDirName":"\u524D\u7AEF/React/React \u751F\u6001/\u72B6\u6001\u7BA1\u7406/Redux","slug":"/\u524D\u7AEF/React/React \u751F\u6001/\u72B6\u6001\u7BA1\u7406/Redux/","permalink":"/docs/\u524D\u7AEF/React/React \u751F\u6001/\u72B6\u6001\u7BA1\u7406/Redux/","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/\u524D\u7AEF/React/React \u751F\u6001/\u72B6\u6001\u7BA1\u7406/Redux/index.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"\u524D\u7AEF","previous":{"title":"Mobx \uD83E\uDDCA","permalink":"/docs/\u524D\u7AEF/React/React \u751F\u6001/\u72B6\u6001\u7BA1\u7406/Mobx/"},"next":{"title":"Zustand \uD83D\uDD25","permalink":"/docs/\u524D\u7AEF/React/React \u751F\u6001/\u72B6\u6001\u7BA1\u7406/Zustand/"}}'),r=n(96773),s=n(16070);let c={},i="Redux \uD83E\uDDCA",d={},o=[{value:"API",id:"api",level:2},{value:"\u4E00\u4E2A\u7B80\u5355\u7684\u4F8B\u5B50",id:"\u4E00\u4E2A\u7B80\u5355\u7684\u4F8B\u5B50",level:2},{value:"\u53C2\u8003\u94FE\u63A5",id:"\u53C2\u8003\u94FE\u63A5",level:2}];function u(e){let t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"redux-",children:"Redux \uD83E\uDDCA"})}),"\n",(0,r.jsx)(t.h2,{id:"api",children:"API"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-mdx",children:"1. createStore(reducer, [preloadedState], [enhancer]): \u521B\u5EFA\u4E00\u4E2A Redux store \u6765\u4FDD\u5B58\u5E94\u7528\u7684\u72B6\u6001\u3002\n2. Actions\uFF08\u52A8\u4F5C\uFF09: \u4E00\u4E2A\u63CF\u8FF0\u53D1\u751F\u4E86\u4EC0\u4E48\u7684\u666E\u901A\u5BF9\u8C61\uFF0C\u5FC5\u987B\u6709\u4E00\u4E2A type \u5C5E\u6027\u3002\n3. Reducers\uFF08\u5F52\u7EA6\u5668\uFF09: \u4E00\u4E2A\u7EAF\u51FD\u6570\uFF0C\u63A5\u6536\u5F53\u524D\u72B6\u6001\u548C action\uFF0C\u8FD4\u56DE\u65B0\u7684\u72B6\u6001\u3002\n4. combineReducers(reducers): \u5C06\u591A\u4E2A reducer \u5408\u5E76\u6210\u4E00\u4E2A reducer\u3002\n5. bindActionCreators(actionCreators, dispatch): \u5C06 action creators \u7ED1\u5B9A\u5230 dispatch \u65B9\u6CD5\u3002\n"})}),"\n",(0,r.jsx)(t.h2,{id:"\u4E00\u4E2A\u7B80\u5355\u7684\u4F8B\u5B50",children:"\u4E00\u4E2A\u7B80\u5355\u7684\u4F8B\u5B50"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:'import { createStore } from "redux";\n\n/**\n * This is a reducer - a function that takes a current state value and an\n * action object describing "what happened", and returns a new state value.\n * A reducer\'s function signature is: (state, action) => newState\n *\n * The Redux state should contain only plain JS objects, arrays, and primitives.\n * The root state value is usually an object. It\'s important that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * You can use any conditional logic you want in a reducer. In this example,\n * we use a switch statement, but it\'s not required.\n */\nfunction counterReducer(state = { value: 0 }, action) {\n  switch (action.type) {\n    case "counter/incremented":\n      return { value: state.value + 1 };\n    case "counter/decremented":\n      return { value: state.value - 1 };\n    default:\n      return state;\n  }\n}\n\n// Create a Redux store holding the state of your app.\n// Its API is { subscribe, dispatch, getState }.\nlet store = createStore(counterReducer);\n\n// You can use subscribe() to update the UI in response to state changes.\n// Normally you\'d use a view binding library (e.g. React Redux) rather than subscribe() directly.\n// There may be additional use cases where it\'s helpful to subscribe as well.\n\nstore.subscribe(() => console.log(store.getState()));\n\n// The only way to mutate the internal state is to dispatch an action.\n// The actions can be serialized, logged or stored and later replayed.\nstore.dispatch({ type: "counter/incremented" });\n// {value: 1}\nstore.dispatch({ type: "counter/incremented" });\n// {value: 2}\nstore.dispatch({ type: "counter/decremented" });\n// {value: 1}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"\u53C2\u8003\u94FE\u63A5",children:"\u53C2\u8003\u94FE\u63A5"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://redux.js.org/",children:"https://redux.js.org/"})})]})}function l(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);