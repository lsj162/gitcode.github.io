"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6594],{29711:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>l,frontMatter:()=>c,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"\u524d\u7aef/React/React \u751f\u6001/\u72b6\u6001\u7ba1\u7406/Redux/index","title":"Redux \ud83e\uddca","description":"API","source":"@site/docs/\u524d\u7aef/React/React \u751f\u6001/\u72b6\u6001\u7ba1\u7406/Redux/index.mdx","sourceDirName":"\u524d\u7aef/React/React \u751f\u6001/\u72b6\u6001\u7ba1\u7406/Redux","slug":"/\u524d\u7aef/React/React \u751f\u6001/\u72b6\u6001\u7ba1\u7406/Redux/","permalink":"/docs/\u524d\u7aef/React/React \u751f\u6001/\u72b6\u6001\u7ba1\u7406/Redux/","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/\u524d\u7aef/React/React \u751f\u6001/\u72b6\u6001\u7ba1\u7406/Redux/index.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"\u524d\u7aef","previous":{"title":"Mobx \ud83e\uddca","permalink":"/docs/\u524d\u7aef/React/React \u751f\u6001/\u72b6\u6001\u7ba1\u7406/Mobx/"},"next":{"title":"Zustand \ud83d\udd25","permalink":"/docs/\u524d\u7aef/React/React \u751f\u6001/\u72b6\u6001\u7ba1\u7406/Zustand/"}}');var r=n(25105),s=n(93881);const c={},o="Redux \ud83e\uddca",i={},d=[{value:"API",id:"api",level:2},{value:"\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50",id:"\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50",level:2},{value:"\u53c2\u8003\u94fe\u63a5",id:"\u53c2\u8003\u94fe\u63a5",level:2}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"redux-",children:"Redux \ud83e\uddca"})}),"\n",(0,r.jsx)(t.h2,{id:"api",children:"API"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-mdx",children:"1. createStore(reducer, [preloadedState], [enhancer]): \u521b\u5efa\u4e00\u4e2a Redux store \u6765\u4fdd\u5b58\u5e94\u7528\u7684\u72b6\u6001\u3002\n2. Actions\uff08\u52a8\u4f5c\uff09: \u4e00\u4e2a\u63cf\u8ff0\u53d1\u751f\u4e86\u4ec0\u4e48\u7684\u666e\u901a\u5bf9\u8c61\uff0c\u5fc5\u987b\u6709\u4e00\u4e2a type \u5c5e\u6027\u3002\n3. Reducers\uff08\u5f52\u7ea6\u5668\uff09: \u4e00\u4e2a\u7eaf\u51fd\u6570\uff0c\u63a5\u6536\u5f53\u524d\u72b6\u6001\u548c action\uff0c\u8fd4\u56de\u65b0\u7684\u72b6\u6001\u3002\n4. combineReducers(reducers): \u5c06\u591a\u4e2a reducer \u5408\u5e76\u6210\u4e00\u4e2a reducer\u3002\n5. bindActionCreators(actionCreators, dispatch): \u5c06 action creators \u7ed1\u5b9a\u5230 dispatch \u65b9\u6cd5\u3002\n"})}),"\n",(0,r.jsx)(t.h2,{id:"\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50",children:"\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:'import { createStore } from "redux";\n\n/**\n * This is a reducer - a function that takes a current state value and an\n * action object describing "what happened", and returns a new state value.\n * A reducer\'s function signature is: (state, action) => newState\n *\n * The Redux state should contain only plain JS objects, arrays, and primitives.\n * The root state value is usually an object. It\'s important that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * You can use any conditional logic you want in a reducer. In this example,\n * we use a switch statement, but it\'s not required.\n */\nfunction counterReducer(state = { value: 0 }, action) {\n  switch (action.type) {\n    case "counter/incremented":\n      return { value: state.value + 1 };\n    case "counter/decremented":\n      return { value: state.value - 1 };\n    default:\n      return state;\n  }\n}\n\n// Create a Redux store holding the state of your app.\n// Its API is { subscribe, dispatch, getState }.\nlet store = createStore(counterReducer);\n\n// You can use subscribe() to update the UI in response to state changes.\n// Normally you\'d use a view binding library (e.g. React Redux) rather than subscribe() directly.\n// There may be additional use cases where it\'s helpful to subscribe as well.\n\nstore.subscribe(() => console.log(store.getState()));\n\n// The only way to mutate the internal state is to dispatch an action.\n// The actions can be serialized, logged or stored and later replayed.\nstore.dispatch({ type: "counter/incremented" });\n// {value: 1}\nstore.dispatch({ type: "counter/incremented" });\n// {value: 2}\nstore.dispatch({ type: "counter/decremented" });\n// {value: 1}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"\u53c2\u8003\u94fe\u63a5",children:"\u53c2\u8003\u94fe\u63a5"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://redux.js.org/",children:"https://redux.js.org/"})})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},93881:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>o});var a=n(58101);const r={},s=a.createContext(r);function c(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);